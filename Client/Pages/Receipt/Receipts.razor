@attribute [Route(Routes.Receipts.Base)]
@inject HttpClient Http

<Notification @ref="_notification" />

<h3 class="mb-4 text-primary">Документы поступления</h3>

<div class="mb-4">
    <button class="btn btn-success" @onclick="ShowCreateModal">
        <i class="bi bi-plus-circle me-1"></i> Добавить
    </button>
</div>

@if (_receiptDocuments == null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    <div class="table-responsive rounded-3 shadow-sm">
        <table class="table table-hover align-middle mb-0 bg-white">
            <thead class="bg-light">
                <tr>
                    <th class="ps-4">Номер</th>
                    <th>Дата</th>
                    <th>Ресурсы</th>
                    <th>Единицы измерения</th>
                    <th>Количество</th>
                    <th class="text-end pe-4">Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var document in _receiptDocuments)
                {
                    <tr class="position-relative">
                        <td class="ps-4 fw-semibold">@document.Number</td>
                        <td>@document.Date.ToString("dd.MM.yyyy")</td>
                        <td>
                            @if (document.HasResources())
                            {
                                <div class="d-flex flex-column gap-1">
                                    @foreach (var resource in document.ReceiptResources!)
                                    {
                                        <span class="badge bg-primary bg-opacity-10 text-primary">@resource.Resource.Name</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <span class="text-muted small">Нет ресурсов</span>
                            }
                        </td>
                        <td>
                            @if (document.HasResources())
                            {
                                <div class="d-flex flex-column gap-1">
                                    @foreach (var resource in document.ReceiptResources!)
                                    {
                                        <span class="badge bg-secondary bg-opacity-10 text-secondary">@resource.UnitOfMeasure.Name</span>
                                    }
                                </div>
                            }
                        </td>
                        <td>
                            @if (document.HasResources())
                            {
                                <div class="d-flex flex-column gap-1">
                                    @foreach (var resource in document.ReceiptResources!)
                                    {
                                        <span class="badge bg-info bg-opacity-10 text-info">@resource.Quantity</span>
                                    }
                                </div>
                            }
                        </td>
                        <td class="text-end pe-4">
                            <button class="btn btn-sm btn-primary me-1"
                                    @onclick="() => ShowUpdateModal(document.Id)">
                                Редактировать
                            </button>
                            <button class="btn btn-sm btn-danger"
                                    @onclick="() => DeleteDocument(document.Id)">
                                Удалить
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<ReceiptCreate Show="@_showCreateModal"
               ShowChanged="@((bool value) => _showCreateModal = value)"
               OnReceiptCreated="@RefreshDocuments" />

<ReceiptUpdate Show="@_showEditModal"
               ShowChanged="@((bool value) => _showEditModal = value)"
               OnReceiptUpdated="@RefreshDocuments" />

@code {
    private List<ReceiptDocumentDto>? _receiptDocuments;
    private bool _showCreateModal = false;
    private bool _showEditModal = false;
    private Notification? _notification;

    protected override async Task OnInitializedAsync()
    {
        await RefreshDocuments();
    }

    private async Task RefreshDocuments()
    {
        HttpResponseMessage response = await Http.GetAsync(Routes.Receipts.Api);

        if (!response.IsSuccessStatusCode)
        {
            _notification?.ShowAsync(await response.Content.ReadAsStringAsync());
            return;
        }

        _receiptDocuments = await response.Content.ReadFromJsonAsync<List<ReceiptDocumentDto>>();
    }

    private void ShowCreateModal()
    {
        _showCreateModal = true;
    }

    private async Task ShowUpdateModal(int id)
    {
        HttpResponseMessage response = await Http.GetAsync(Routes.TransformUrl(Routes.Receipts.Api, id));

        if (!response.IsSuccessStatusCode)
        {
            _notification?.ShowAsync(await response.Content.ReadAsStringAsync());
            return;
        }

        _showEditModal = true;
    }

    private async Task DeleteDocument(int id)
    {
        HttpResponseMessage response = await Http.DeleteAsync(Routes.TransformUrl(Routes.Receipts.Api, id));

        if (!response.IsSuccessStatusCode)
        {
            _notification?.ShowAsync(await response.Content.ReadAsStringAsync());
            return;
        }

        _notification?.ShowAsync("Документ был успешно удален!", false);
        await RefreshDocuments();
    }
}