@attribute [Route(Routes.Shipments.Base)]
@inject HttpClient Http

<Notification @ref="_notification" />

<h3 class="mb-4 text-primary">Документы отгрузки</h3>

<div class="mb-4">
    <button class="btn btn-success" @onclick="ShowCreateModal">
        <i class="bi bi-plus-circle"></i> Добавить
    </button>
</div>

@if (_shipmentDocuments == null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    <div class="table-responsive rounded-3 shadow-sm">
        <table class="table table-hover align-middle mb-0 bg-white">
            <thead class="bg-light">
                <tr>
                    <th class="ps-4">Номер</th>
                    <th>Дата</th>
                    <th>Клиент</th>
                    <th>Статус</th>
                    <th>Ресурсы</th>
                    <th>Единицы</th>
                    <th>Кол-во</th>
                    <th class="text-end pe-4">Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var document in _shipmentDocuments)
                {
                    <tr class="position-relative">
                        <td class="ps-4 fw-semibold">@document.Number</td>
                        <td>@document.Date.ToString("dd.MM.yyyy")</td>
                        <td>@document.Client.Name</td>
                        <td>
                            <span class="badge @(document.Status == Status.Signed ? "bg-success" : "bg-warning text-dark")">
                                @(document.Status == Status.Signed ? "Подписан" : "Не подписан")
                            </span>
                        </td>
                        <td>
                            @if (document.HasResources())
                            {
                                <div class="d-flex flex-column gap-1">
                                    @foreach (var resource in document.ShipmentResources!)
                                    {
                                        <span class="badge bg-primary bg-opacity-10 text-primary">@resource.Resource.Name</span>
                                    }
                                </div>
                            }
                        </td>
                        <td>
                            @if (document.HasResources())
                            {
                                <div class="d-flex flex-column gap-1">
                                    @foreach (var resource in document.ShipmentResources!)
                                    {
                                        <span class="badge bg-secondary bg-opacity-10 text-secondary">@resource.UnitOfMeasure.Name</span>
                                    }
                                </div>
                            }
                        </td>
                        <td>
                            @if (document.HasResources())
                            {
                                <div class="d-flex flex-column gap-1">
                                    @foreach (var resource in document.ShipmentResources!)
                                    {
                                        <span class="badge bg-info bg-opacity-10 text-info">@resource.Quantity</span>
                                    }
                                </div>
                            }
                        </td>
                        <td class="text-end pe-4">
                            <button class="btn btn-sm btn-primary" @onclick="() => ShowUpdateModal(document.Id)">Редактировать</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteDocument(document.Id)">Удалить</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<ShipmentCreate Show="@_showCreateModal"
              ShowChanged="@((bool value) => _showCreateModal = value)"
              OnShipmentCreated="@RefreshDocuments" />

@* <ReceiptUpdate 
    Show="@_showEditModal" 
    ShowChanged="@((bool value) => _showEditModal = value)" 
    Document="@_selectedDocument" 
    OnDocumentUpdated="@RefreshDocuments" /> *@

@code {
    private List<ShipmentDocumentDto>? _shipmentDocuments;
    private bool _showCreateModal = false;
    private bool _showEditModal = false;
    private ShipmentDocumentDto? _selectedDocument;
    private Notification? _notification;

    protected override async Task OnInitializedAsync()
    {
        await RefreshDocuments();
    }

    private async Task RefreshDocuments()
    {
        HttpResponseMessage response = await Http.GetAsync(Routes.Shipments.Api);

        if (!response.IsSuccessStatusCode)
        {
            _notification?.ShowAsync(await response.Content.ReadAsStringAsync());
            return;
        }

        _shipmentDocuments = await response.Content.ReadFromJsonAsync<List<ShipmentDocumentDto>>();
    }

    private void ShowCreateModal()
    {
        _showCreateModal = true;
    }

    private async Task ShowUpdateModal(int id)
    {
        HttpResponseMessage response = await Http.GetAsync(Routes.TransformUrl(Routes.Shipments.Api, id));

        if (!response.IsSuccessStatusCode)
        {
            _notification?.ShowAsync(await response.Content.ReadAsStringAsync());
            return;
        }

        _selectedDocument = await response.Content.ReadFromJsonAsync<ShipmentDocumentDto>();
        _showEditModal = true;
    }

    private async Task DeleteDocument(int id)
    {
        HttpResponseMessage response = await Http.DeleteAsync(Routes.TransformUrl(Routes.Shipments.Api, id));

        if (!response.IsSuccessStatusCode)
        {
            _notification?.ShowAsync(await response.Content.ReadAsStringAsync());
            return;
        }

        _notification?.ShowAsync("Документ был успешно удален!", false);
        await RefreshDocuments();
    }
}

