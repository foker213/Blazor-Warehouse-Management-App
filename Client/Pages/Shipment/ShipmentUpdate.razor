@inject HttpClient Http

<Notification @ref="_notification" />

<div class="modal @(Show ? "d-block" : "d-none")" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="display: flex; justify-content: space-between">
                <h5 class="modal-title">Редактирование документа поступления</h5>
                <button type="button" class="close" style="background: white; border: 0;" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Model" @ref="formReference" OnValidSubmit="@(() => HandleSubmit(_actionType))">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label for="documentNumber">Номер документа</label>
                        <InputText id="documentNumber" @bind-Value="Model.Number" class="form-control" />
                        <ValidationMessage For="@(() => Model.Number)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="documentNumber">Клиент</label>
                        <InputSelect class="form-select" @bind-Value="Model.ClientId">
                            <option value="">Выберите клиента</option>
                            @if (_clients != null)
                            {
                                @foreach (var item in _clients)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Model.ClientId)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="documentDate">Дата</label>
                        <InputDate id="documentDate" @bind-Value="Model.Date" class="form-control" />
                    </div>

                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5>Ресурсы</h5>
                        <button type="button" class="btn btn-sm btn-primary" @onclick="AddResource">
                            <i class="bi bi-plus-circle me-1"></i> Добавить ресурс
                        </button>
                    </div>

                    <div class="table-responsive mb-3">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Ресурс</th>
                                    <th>Единица измерения</th>
                                    <th>Количество</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (var i = 0; i < Model.ShipmentResources.Count; i++)
                                {
                                    var resource = Model.ShipmentResources[i];
                                    <tr>
                                        <td>
                                            <InputSelect class="form-select" @bind-Value="resource.ResourceId">
                                                <option value="">Выберите ресурс</option>
                                                @if (_resources != null)
                                                {
                                                    @foreach (var item in _resources)
                                                    {
                                                        <option value="@item.Id">@item.Name</option>
                                                    }
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => resource.ResourceId)" />
                                        </td>
                                        <td>
                                            <InputSelect class="form-select" @bind-Value="resource.UnitOfMeasureId">
                                                <option value="">Выберите единицу измерения</option>
                                                @if (_unitOfMeasures != null)
                                                {
                                                    @foreach (var item in _unitOfMeasures)
                                                    {
                                                        <option value="@item.Id">@item.Name</option>
                                                    }
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => resource.UnitOfMeasureId)" />
                                        </td>
                                        <td>
                                            <InputNumber @bind-Value="resource.Quantity" class="form-control" />
                                            <ValidationMessage For="@(() => resource.Quantity)" />
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveResource(resource)">Удалить</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="modal-footer">
                        @if (Model.Status == Status.NotSigned)
                        {
                            <button type="submit" class="btn btn-primary" @onclick="@(() => _actionType = "save")">Сохранить</button>
                            <button type="submit" class="btn btn-primary" @onclick="@(() => _actionType = "sign")">Сохранить и подписать</button>
                            <button type="button" class="btn btn-secondary" @onclick="Close">Отмена</button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-primary" @onclick="@(() => _actionType = "save")">Сохранить</button>
                            <button type="submit" class="btn btn-danger" @onclick="@(() => _actionType = "revoke")">Сохранить и отозвать</button>
                            <button type="button" class="btn btn-secondary" @onclick="Close">Отмена</button>
                        }
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public EventCallback<bool> ShowChanged { get; set; }

    [Parameter]
    public EventCallback OnShipmentUpdated { get; set; }

    [Parameter]
    public int ShipmentId { get; set; }

    private ShipmentDocumentUpdateDto Model { get; set; } = new();
    private List<ResourceDto>? _resources;
    private List<UnitDto>? _unitOfMeasures;
    private List<ClientDto>? _clients;
    private Notification? _notification;

    private EditForm? formReference;
    private string _actionType = "save";

    protected override async Task OnInitializedAsync()
    {
        await LoadDictionaries();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Show && ShipmentId > 0)
        {
            await LoadShipmentData();
        }
    }

    private async Task LoadShipmentData()
    {
        var response = await Http.GetFromJsonAsync<ShipmentDocumentUpdateDto>(Routes.Shipments.Api + $"/{ShipmentId}");

        if (response != null)
        {
            Model = response;
        }
    }

    private async Task LoadDictionaries()
    {
        _resources = await Http.GetFromJsonAsync<List<ResourceDto>>(Routes.Resources.Api) ?? new();
        _unitOfMeasures = await Http.GetFromJsonAsync<List<UnitDto>>(Routes.Units.Api) ?? new();
        _clients = await Http.GetFromJsonAsync<List<ClientDto>>(Routes.Clients.Api) ?? new();

        _resources = _resources.Where(x => x.State == State.InWork).ToList();
        _unitOfMeasures = _unitOfMeasures.Where(x => x.State == State.InWork).ToList();
        _clients = _clients.Where(x => x.State == State.InWork).ToList();
    }

    private void AddResource()
    {
        Model.ShipmentResources.Add(new ShipmentResourceUpdateDto());
    }

    private void RemoveResource(ShipmentResourceUpdateDto resource)
    {
        Model.ShipmentResources.Remove(resource);
    }

    private async Task HandleSubmit(string actionType)
    {
        if (Model.ShipmentResources.Count == 0)
        {
            _notification?.ShowAsync("Документ должен содержать хотя бы один ресурс");
            return;
        }

        if (Model.ClientId == 0)
        {
            _notification?.ShowAsync("Клиент не выбран");
            return;
        }

        foreach (var resource in Model.ShipmentResources)
        {
            if (resource.ResourceId == 0)
            {
                _notification?.ShowAsync("Ресурс должен быть выбран");
                return;
            }

            if (resource.UnitOfMeasureId == 0)
            {
                _notification?.ShowAsync("Для всех ресурсов должна быть выбрана единица измерения");
                return;
            }
        }

        HttpResponseMessage response;

        if (actionType == "save")
        {
            response = await Http.PutAsJsonAsync(Routes.Shipments.Api, Model);
        }
        else
        {
            response = await Http.PutAsJsonAsync(Routes.Shipments.Api + "/changestatus", Model);
        }

        if (!response.IsSuccessStatusCode)
        {
            _notification?.ShowAsync(await response.Content.ReadAsStringAsync());
            return;
        }

        _notification?.ShowAsync(actionType == "save" ? "Документ успешно сохранен!" :
            actionType == "sign" ? "Документ успешно подписан!" :
            "Документ успешно отозван!",
            false);
        await OnShipmentUpdated.InvokeAsync();
        await Close();
    }

    private async Task Close()
    {
        await ShowChanged.InvokeAsync(false);
    }
}