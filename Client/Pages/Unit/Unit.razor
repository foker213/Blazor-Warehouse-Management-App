@attribute [Route(Routes.Units.Base)]

@inject HttpClient Http

<Notification @ref="_notification" />

<h3 class ="mb-4 text-primary">Единицы измерения</h3>

<div class="mb-3">
    <button class="btn me-2 @(currentState == State.InWork ? "btn-primary" : "btn-secondary")" @onclick="() => LoadUnits(State.InWork)">В работе</button>
    <button class="btn me-2 @(currentState == State.InArchive ? "btn-primary" : "btn-secondary")" @onclick="() => LoadUnits(State.InArchive)">Архив</button>
    <button class="btn btn-success" @onclick="ShowCreateModal">Добавить</button>
</div>

@if (units == null)
{
    <p>Загрузка...</p>
}
else
{
    <div class="table-responsive rounded-3 shadow-sm">
        <table class="table table-hover align-middle mb-0 bg-white">
            <thead class="bg-light">
                <tr>
                    <th class="ps-4">Наименование</th>
                    <th class="text-end pe-4">Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var unit in units)
                {
                    <tr>
                        <td class="ps-4 fw-semibold">@unit.Name</td>
                        <td class="text-end pe-4">
                            <button class="btn btn-sm btn-primary" @onclick="() => ShowUpdateModal(unit.Id)">Редактировать</button>
                            <button class="btn btn-sm btn-primary" @onclick="() => ChangeState(unit.Id)">@(currentState == State.InWork ? "В архив" : "В работу")</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteUnit(unit.Id)">Удалить</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<UnitCreate Show="@showCreateModal"
                ShowChanged="@((bool value) => showCreateModal = value)"
                OnUnitCreated="@RefreshUnits" />

<UnitUpdate 
    Show="@showEditModal" 
    ShowChanged="@((bool value) => showEditModal = value)" 
    Unit="@selectedUnit" 
    OnUnitUpdated="@RefreshUnits" />

@code {
    private List<UnitDto>? units;
    private State currentState = State.InWork;
    private bool showCreateModal = false;
    private bool showEditModal = false;
    private UnitUpdateDto? selectedUnit;
    private Notification? _notification;

    protected override async Task OnInitializedAsync()
    {
        await LoadUnits(currentState);
    }

    private async Task LoadUnits(State state)
    {
        currentState = state;
        await RefreshUnits();
    }

    private async Task RefreshUnits()
    {
        HttpResponseMessage response = await Http.GetAsync(Routes.Units.Api);

        if (!response.IsSuccessStatusCode)
        {
            _notification?.ShowAsync(await response.Content.ReadAsStringAsync());
        }

        List<UnitDto>? allUnits = await response.Content.ReadFromJsonAsync<List<UnitDto>>();

        units = allUnits?.Where(r => r.State == currentState).ToList();
    }

    private void ShowCreateModal()
    {
        showCreateModal = true;
    }

    private async Task ShowUpdateModal(int id)
    {
        HttpResponseMessage response = await Http.GetAsync(Routes.TransformUrl(Routes.Units.Api, id));

        if (!response.IsSuccessStatusCode)
        {
            _notification?.ShowAsync(await response.Content.ReadAsStringAsync());
            return;
        }

        UnitDto? unit = await response.Content.ReadFromJsonAsync<UnitDto>();

        selectedUnit = new() { 
            Id = unit!.Id,
            Name = unit.Name,
            State = unit.State
        };
        showEditModal = true;
    }


    private async Task ChangeState(int id)
    {
        HttpResponseMessage response = await Http.PatchAsync(Routes.TransformUrl(Routes.Units.Api, id), null);

        if (!response.IsSuccessStatusCode)
        {
            _notification?.ShowAsync(await response.Content.ReadAsStringAsync());
            return;
        }

        _notification?.ShowAsync("Успешно!", false);

        await LoadUnits(currentState);
    }

    private async Task DeleteUnit(int id)
    {
        HttpResponseMessage response = await Http.DeleteAsync(Routes.TransformUrl(Routes.Units.Api, id));

        if (!response.IsSuccessStatusCode)
        {
            _notification?.ShowAsync(await response.Content.ReadAsStringAsync());
            return;
        }

        _notification?.ShowAsync("Единица измерения была успешно удалена!", false);

        await LoadUnits(currentState);
    }
}