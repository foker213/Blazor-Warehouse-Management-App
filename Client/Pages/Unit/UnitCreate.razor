@using System.ComponentModel.DataAnnotations
@using WarehouseManagement.Contracts
@using WarehouseManagement.Contracts.UnitOfMeasure
<div class="modal @(Show ? "d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Добавление единицы измерения</h5>
                <button type="button" class="close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="unitName">Наименование</label>
                        <InputText id="unitName" @bind-Value="Model.Name" class="form-control" />
                        <ValidationMessage For="@(() => Model.Name)" />
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Сохранить</button>
                        <button type="button" class="btn btn-secondary" @onclick="Close">Отмена</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public EventCallback<bool> ShowChanged { get; set; }

    [Parameter]
    public EventCallback OnUnitCreated { get; set; }

    [Inject]
    public HttpClient Http { get; set; } = null!;

    private UnitCreateDto Model { get; set; } = new();

    private async Task HandleSubmit()
    {
        var response = await Http.PostAsJsonAsync(Routes.Units.Api, Model);

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception(await response.Content.ReadAsStringAsync());
        }

        Model = new();
        await OnUnitCreated.InvokeAsync();
        await Close();
    }

    private async Task Close()
    {
        await ShowChanged.InvokeAsync(false);
    }
}