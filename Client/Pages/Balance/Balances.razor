@attribute [Route(Routes.Balances.Base)]
@inject HttpClient Http

<Notification @ref="_notification" />

<h3>Баланс</h3>

<div class="mb-3">
    <div class="row">
        <div class="col-md-4">
            <label>Ресурс</label>
            <select class="form-select" @bind="_selectedResourceFilters" multiple>
                @foreach (string resource in _availableResources)
                {
                    <option value="@resource">@resource</option>
                }
            </select>
            <small class="text-muted">Для выбора нескольких удерживайте Ctrl</small>
        </div>
        <div class="col-md-4">
            <label>Единица измерения</label>
            <select class="form-select" @bind="_selectedUnitFilters" multiple>
                @foreach (string unit in _availableUnits)
                {
                    <option value="@unit">@unit</option>
                }
            </select>
            <small class="text-muted">Для выбора нескольких удерживайте Ctrl</small>
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button class="btn btn-primary" @onclick="ApplyFilters">Применить</button>
            <button class="btn btn-secondary" @onclick="ClearFilters">Сбросить</button>
        </div>
    </div>
</div>

@if (_balanceItems == null)
{
    <p>Загрузка...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Ресурс</th>
                <th>Единица измерения</th>
                <th>Количество</th>
            </tr>
        </thead>
        <tbody>
            @foreach (BalanceDto item in _balanceItems)
            {
                <tr>
                    <td>@item.Resource.Name</td>
                    <td>@item.UnitOfMeasure.Name</td>
                    <td>@item.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BalanceDto>? _balanceItems;
    private Notification? _notification;

    private string[] _selectedResourceFilters = Array.Empty<string>();
    private string[] _selectedUnitFilters = Array.Empty<string>();
    private List<string> _availableResources = new();
    private List<string> _availableUnits = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFilters();
        await LoadBalance();
    }

    private async Task LoadFilters()
    {
        HttpResponseMessage? response = await Http.GetAsync(Routes.Resources.Api);
        if (response.IsSuccessStatusCode)
        {
            List<ResourceDto> resources = await response.Content.ReadFromJsonAsync<List<ResourceDto>>() ?? new();
            _availableResources.AddRange(resources.Select(x => x.Name));
        }
        else
        {
            _notification?.Show(await response.Content.ReadAsStringAsync());
        }

        response = await Http.GetAsync(Routes.Units.Api);
        if (response.IsSuccessStatusCode)
        {
            List<UnitDto> units = await response.Content.ReadFromJsonAsync<List<UnitDto>>() ?? new();
            _availableUnits.AddRange(units.Select(x => x.Name));
        }
        else
        {
            _notification?.Show(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task LoadBalance()
    {
        HttpResponseMessage? response = await Http.GetAsync(Routes.Balances.Api);

        if (!response.IsSuccessStatusCode)
        {
            _notification?.Show(await response.Content.ReadAsStringAsync());
            return;
        }

        _balanceItems = await response.Content.ReadFromJsonAsync<List<BalanceDto>>();
    }

    private async Task LoadBalanceWithFilters()
    {
        FilterDto filter = new()
        {
            Resources = _selectedResourceFilters.Any() ? _selectedResourceFilters.ToList() : null,
            UnitsOfMeasure = _selectedUnitFilters.Any() ? _selectedUnitFilters.ToList() : null
        };

        HttpResponseMessage? response = await Http.PostAsJsonAsync(Routes.Balances.Api + "/filter", filter);

        if (!response.IsSuccessStatusCode)
        {
            _notification?.Show(await response.Content.ReadAsStringAsync());
            return;
        }

        _balanceItems = await response.Content.ReadFromJsonAsync<List<BalanceDto>>();
    }

    private async Task ApplyFilters()
    {
        await LoadBalanceWithFilters();
    }

    private async Task ClearFilters()
    {
        _selectedResourceFilters = Array.Empty<string>();
        _selectedUnitFilters = Array.Empty<string>();
        await LoadBalance();
    }
}